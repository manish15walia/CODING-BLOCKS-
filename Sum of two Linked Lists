// A Java recursive program to add two linked lists

import java.util.*;
public class Main
{
	class node
	{
		int val;
		node next;

		public node(int val)
		{
			this.val = val;
		}
	}
	

	void printlist(node head)
	{
		while (head != null)
		{
			System.out.print(head.val + " ");
			head = head.next;
		}
	}

	node head1, head2, result;
	int carry;

	/* A utility function to push a value to linked list */
	void push(int val, int list)
	{
		node newnode = new node(val);
		if (list == 1)
		{
			newnode.next = head1;
			head1 = newnode;
		}
		else if (list == 2)
		{
			newnode.next = head2;
			head2 = newnode;
		}
		else
		{
			newnode.next = result;
			result = newnode;
		}

	}

	// Adds two linked lists of same size represented by
	// head1 and head2 and returns head of the resultant
	// linked list. Carry is propagated while returning
	// from the recursion
	void addsamesize(node n, node m)
	{
		// Since the function assumes linked lists are of
		// same size, check any of the two head pointers
		if (n == null)
			return;

		// Recursively add remaining nodes and get the carry
		addsamesize(n.next, m.next);

		// add digits of current nodes and propagated carry
		int sum = n.val + m.val + carry;
		carry = sum / 10;
		sum = sum % 10;

		// Push this to result list
		push(sum, 3);

	}

	node cur;

	void propogatecarry(node head1)
	{
		if (head1 != cur)
		{
			propogatecarry(head1.next);
			int sum = carry + head1.val;
			carry = sum / 10;
			sum %= 10;

			push(sum, 3);
		}
	}

	int getsize(node head)
	{
		int count = 0;
		while (head != null)
		{
			count++;
			head = head.next;
		}
		return count;
	}

	// The main function that adds two linked lists
	// represented by head1 and head2. The sum of two
	// lists is stored in a list referred by result
	void addlists()
	{
		// first list is empty
		if (head1 == null)
		{
			result = head2;
			return;
		}

		// first list is empty
		if (head2 == null)
		{
			result = head1;
			return;
		}

		int size1 = getsize(head1);
		int size2 = getsize(head2);

		// Add same size lists
		if (size1 == size2)
		{
			addsamesize(head1, head2);
		}
		else
		{
			// First list should always be larger than second list.
			// If not, swap pointers
			if (size1 < size2)
			{
				node temp = head1;
				head1 = head2;
				head2 = temp;
			}
			int diff = Math.abs(size1 - size2);

			// move diff. number of nodes in first list
			node temp = head1;
			while (diff-- >= 0)
			{
				cur = temp;
				temp = temp.next;
			}

			addsamesize(cur, head2);

			propogatecarry(head1);
		}
		
			if (carry > 0)
				push(carry, 3);
		
	}

	public static void main(String args[])
	{
		Main list = new Main();
		list.head1 = null;
		list.head2 = null;
		list.result = null;
		list.carry = 0;
		Scanner sc = new Scanner(System.in);
		int n1 = sc.nextInt();
		int n2 = sc.nextInt();
		int [] arr1 = new int[n1];
		for(int i=0;i<n1;i++){
		    arr1[i]=sc.nextInt();
		}
		
	
		int [] arr2 = new int[n2];
		for(int i=0;i<n2;i++){
		    arr2[i]=sc.nextInt();
		}

		for (int i = n1 - 1; i >= 0; --i)
			list.push(arr1[i], 1);

		for (int i = n2 - 1; i >= 0; --i)
			list.push(arr2[i], 2);

		list.addlists();

		list.printlist(list.result);
	}
}

